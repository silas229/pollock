<div x-data="voteForm()" x-init="initForm">
  <div class="mx-auto mb-6 max-w-7xl sm:px-6 lg:px-8">
    <div class="overflow-hidden bg-white shadow-sm dark:bg-gray-800 sm:rounded-lg">
      <div class="p-6 text-gray-900 dark:text-gray-100">
        <h2 class="pb-4 text-xl">Edit vote</h2>
        <form action="/vote/lack/{{ poll.token }}" method="post" @submit.prevent="submitForm">
          <input type="hidden" name="_method" value="put">
          {{#unless user}}
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="name">
            Your Name
          </label>
          <input
            class="block w-full border-gray-300 rounded-md shadow-sm dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-primary-500 dark:focus:border-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600"
            type="text" x-model="formData.owner.name" id="name" name="name" required="required" autofocus="autofocus">
          <span class="error" for="name"></span>
          {{/unless}}

          <fieldset class="mt-4">
            <legend>Choices (You have {{poll.setting.voices}} {{pluralize poll.setting.voices "vote" "votes"}})</legend>
            {{#if poll.setting.worst}}
            <label class="block text-right">Worst</label>
            {{/if}}
            <ul class="block">
              <template x-for="(choice, index) in formData.choice" :key="index">
                <li class="justify-between p-2">
                  <label>
                    <input type="checkbox" x-model="choice.value"
                      class="w-4 h-4 mr-2 border-gray-300 rounded text-primary-600 focus:ring-primary-600">
                    <span x-text="choice.text"></span>
                  </label>
                  {{#if poll.setting.worst}}
                  <input type="radio" name="worst" x-model="choice.worst" :disabled="!choice.value"
                    class="float-right w-4 h-4 transition-colors border-gray-300 text-primary-600 focus:ring-primary-600 disabled:bg-gray-200 disabled:focus:ring-0">
                  {{/if}}
                </li>
              </template>
            </ul>
          </fieldset>

          <button type="submit"
            class="inline-flex items-center px-4 py-2 text-xs font-semibold tracking-widest text-white uppercase transition duration-150 ease-in-out bg-gray-800 border border-transparent rounded-md dark:bg-gray-200 dark:text-gray-800 hover:bg-gray-700 dark:hover:bg-white focus:bg-gray-700 dark:focus:bg-white active:bg-gray-900 dark:active:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800">
            Save
          </button>
        </form>
      </div>
    </div>
  </div>

  <div x-show="result" class="mx-auto mb-6 max-w-7xl sm:px-6 lg:px-8">
    <div class="overflow-hidden text-white bg-green-500 shadow-sm dark:bg-green-800 sm:rounded-lg">
      <div class="p-6">
        <h3 class="text-lg">Success!</h3>
        <p>Your vote was saved.</p>
      </div>
    </div>
  </div>
</div>

<script>
  function voteForm() {
    return {
      result: false,
      formData: {
        owner: { name: "{{ user.name }}", },
        choice: []
      },
      token: "{{ vote.token }}",
      async submitForm() {
        this.formData.choice = this.formData.choice.filter((c) => c.value).map((c) => {
          if (c.worst == "on") {
            c.worst = true;
          } else {
            delete c.worst;
          }

          delete c.text;
          delete c.value;

          return c;
        });

        await fetch("/vote/lack/" + this.token, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify(this.formData),
        }).then(async (res) => {
          this.result = true;
        });
      },
      async initForm() {
        await fetch("/vote/lack/" + this.token,
          {
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json",
            },
          }).then(async (res) => {
            const result = (await res.json());
            this.formData.choice = result.poll.body.options;
            this.formData.owner = result.vote.owner;

            result.vote.choice.forEach((c) => {
              const option = this.formData.choice.find((o) => c.id === o.id)

              option.value = true;
              if (c.worst) {
                option.worst = "on";
              }
            });
          });
      },
    };
  }
</script>