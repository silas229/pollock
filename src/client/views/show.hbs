<div class="py-12">
  <div class="mx-auto mb-6 max-w-7xl sm:px-6 lg:px-8">
    <div class="overflow-hidden bg-white shadow-sm dark:bg-gray-800 sm:rounded-lg">
      <div class="p-6 text-gray-900 dark:text-gray-100 md:columns-2">
        <div class="relative">
          <canvas id="chart" x-data="chart()" x-init="init"></canvas>
        </div>
        <div>
          <h3 class="text-2xl">Votes</h3>
          <ul class="list-disc list-inside">
            {{#each votes}}
            <li class="p-1">{{this.owner.name}}:
              {{#each this.choice}}
              {{#if this.worst}}
              <span class="text-red-800 underline decoration-dotted" title="Worst">{{this.text}}</span>{{#unless
              @last}},
              {{/unless}}
              {{else}}
              {{this.text}}{{#unless @last}}, {{/unless}}
              {{/if}}
              {{/each}}
            </li>
            {{/each}}
          </ul>
        </div>
      </div>
    </div>
  </div>
  <div class="mx-auto mb-6 max-w-7xl sm:px-6 lg:px-8">
    <div class="overflow-hidden bg-white shadow-sm dark:bg-gray-800 sm:rounded-lg">
      <div class="p-6 text-gray-900 dark:text-gray-100">
        <h2 class="pb-4 text-xl">Submit new Vote</h2>
        <form action="/vote/lack/{{ poll.token }}" x-data="voteForm()" x-init="initForm" method="post">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300" for="name">
            Your Name
          </label>
          <input
            class="block w-full border-gray-300 rounded-md shadow-sm dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-primary-500 dark:focus:border-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600"
            type="text" x-model="formData.name" id="name" name="name" required="required" autofocus="autofocus">
          <span class="error" for="name"></span>

          <fieldset class="mt-4">
            <legend>Choices (You have {{poll.setting.voices}} {{pluralize poll.setting.voices "vote" "votes"}})</legend>
            {{#if poll.setting.worst}}
            <label class="block text-right">Worst</label>
            {{/if}}
            <ul class="block">
              {{#each poll.options}}
              <li class="p-2">
                <input type="checkbox" name="{{ this.id }}" id="option-{{ this.id }}"
                  class="w-4 h-4 mr-2 border-gray-300 rounded text-primary-600 focus:ring-primary-600">
                <label for="option-{{ this.id }}">{{ this.text }}</label>
                {{#if ../poll.setting.worst}}
                <input type="radio" name="worst" value="{{ this.id }}"
                  class="float-right w-4 h-4 border-gray-300 text-primary-600 focus:ring-primary-600">
                {{/if}}
              </li>
              {{/each}}
            </ul>
          </fieldset>
        </form>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const ctx = document.getElementById('chart');
  let darkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
    console.log(event.matches)
    darkMode = event.matches;
  });

  const chartOptions = {
    responsive: true,
    plugins: {
      name: {
        display: true,
        text: 'Results',
        font: {
          size: 28,
        },
        color: darkMode ? 'white' : 'black'
      },
      tooltip: {
        cornerRadius: 0,
        displayColors: false,
      },
      legend: {
        labels: {
          color: darkMode ? 'white' : 'black'
        }
      }
    }
  };

  //Chart.default.borderColor = darkMode ? 'black' : 'white';
  //Chart.default.color = darkMode ? 'white' : 'black';
  //Chart.default.font.family = 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"';

  function chart() {
    return {
      token: "{{ poll.token }}",
      result: {},
      async init() {
        await fetch("/poll/lack/" + this.token,
          {
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json",
            },
          })
          .then(async (res) => {
            this.result = await res.json();
            return this.result;
          })
          .then((res) => {
            new Chart(ctx, {
              type: 'pie',
              data: {
                labels: this.result.poll.body.options.map((o) => o.text),
                datasets: [{
                  label: 'Votes',
                  data: this.result.options.map((o) => o.voted.length),
                }],
              },
              options: chartOptions,
            });
          });
      }
    }
  }
</script>

<script>
  function voteForm() {
    initForm() {

    },
  }
</script>